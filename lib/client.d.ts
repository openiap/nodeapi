import { Envelope, FlowService } from "./proto/base";
export type clientType = "socket" | "pipe" | "ws" | "grpc" | "rest";
export type clientAgent = "node" | "browser" | "nodered" | "openrpa" | "powershell" | "python" | "java" | "csharp" | "go" | "unknown";
export interface iclient {
    id: string;
    seq: number;
    remoteip: string;
    agent: clientAgent;
    protocol: clientType;
    version: string;
    doping: boolean;
    created: Date;
    lastheartbeat: Date;
    lastheartbeatstr: string;
    lastheartbeatsec: string;
    user: any;
    jwt: string;
    signedin: boolean;
    connected: boolean;
    connecting: boolean;
    queues: any[];
    exchanges: any[];
    watches: changestream[];
    url: string;
    ws: any;
    stream: any;
    grpc: FlowService;
    call: any;
    grpcStream: any;
    replies: any;
    streams: any;
    Initialize(ws: any, stream: any, call: any, req: any): Promise<boolean>;
    onConnected(client: client): void;
    onDisconnected(client: client, error: Error): void;
    onMessage(client: client, message: any): Promise<Envelope>;
    ping(span: any): void;
    queuecount(): number;
    Watch(aggregates: object[], collectionname: string, jwt: string): Promise<string>;
    UnWatch(id: string, jwt: string): Promise<void>;
    SendWatch(watch: any, next: any, span: any): void;
    Close(): void;
}
export declare class client implements iclient {
    id: string;
    seq: number;
    remoteip: string;
    agent: clientAgent;
    protocol: clientType;
    version: string;
    doping: boolean;
    created: Date;
    lastheartbeat: Date;
    lastheartbeatstr: string;
    lastheartbeatsec: string;
    user: any;
    jwt: string;
    signedin: boolean;
    connected: boolean;
    connecting: boolean;
    queues: any[];
    exchanges: any[];
    watches: changestream[];
    url: string;
    ws: any;
    stream: any;
    grpc: FlowService;
    call: any;
    grpcStream: any;
    replies: any;
    streams: any;
    Initialize(ws: any, stream: any, call: any, req: any): Promise<boolean>;
    onConnected(client: client): void;
    onDisconnected(client: client, error: Error): void;
    onMessage(client: client, message: any): Promise<Envelope>;
    ping(span: any): void;
    queuecount(): number;
    Watch(aggregates: object[], collectionname: string, jwt: string): Promise<string>;
    UnWatch(id: string, jwt: string): Promise<void>;
    SendWatch(watch: any, next: any, span: any): void;
    Close(): void;
}
export declare class changestream {
    stream: any;
    id: string;
    callback: any;
    aggregates: object[];
    collectionname: string;
}
export declare function remoteip(req: any): string;
