// source: queues.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = (function() {
  if (this) { return this; }
  if (typeof window !== 'undefined') { return window; }
  if (typeof global !== 'undefined') { return global; }
  if (typeof self !== 'undefined') { return self; }
  return Function('return this')();
}.call(null));

goog.exportSymbol('proto.openiap.QueueEvent', null, global);
goog.exportSymbol('proto.openiap.QueueMessageRequest', null, global);
goog.exportSymbol('proto.openiap.QueueMessageResponse', null, global);
goog.exportSymbol('proto.openiap.RegisterExchangeRequest', null, global);
goog.exportSymbol('proto.openiap.RegisterExchangeResponse', null, global);
goog.exportSymbol('proto.openiap.RegisterQueueRequest', null, global);
goog.exportSymbol('proto.openiap.RegisterQueueResponse', null, global);
goog.exportSymbol('proto.openiap.UnRegisterQueueRequest', null, global);
goog.exportSymbol('proto.openiap.UnRegisterQueueResponse', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.openiap.RegisterQueueRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.openiap.RegisterQueueRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.openiap.RegisterQueueRequest.displayName = 'proto.openiap.RegisterQueueRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.openiap.RegisterQueueResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.openiap.RegisterQueueResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.openiap.RegisterQueueResponse.displayName = 'proto.openiap.RegisterQueueResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.openiap.RegisterExchangeRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.openiap.RegisterExchangeRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.openiap.RegisterExchangeRequest.displayName = 'proto.openiap.RegisterExchangeRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.openiap.RegisterExchangeResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.openiap.RegisterExchangeResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.openiap.RegisterExchangeResponse.displayName = 'proto.openiap.RegisterExchangeResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.openiap.QueueMessageRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.openiap.QueueMessageRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.openiap.QueueMessageRequest.displayName = 'proto.openiap.QueueMessageRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.openiap.QueueMessageResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.openiap.QueueMessageResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.openiap.QueueMessageResponse.displayName = 'proto.openiap.QueueMessageResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.openiap.QueueEvent = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.openiap.QueueEvent, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.openiap.QueueEvent.displayName = 'proto.openiap.QueueEvent';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.openiap.UnRegisterQueueRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.openiap.UnRegisterQueueRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.openiap.UnRegisterQueueRequest.displayName = 'proto.openiap.UnRegisterQueueRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.openiap.UnRegisterQueueResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.openiap.UnRegisterQueueResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.openiap.UnRegisterQueueResponse.displayName = 'proto.openiap.UnRegisterQueueResponse';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.openiap.RegisterQueueRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.openiap.RegisterQueueRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.openiap.RegisterQueueRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.openiap.RegisterQueueRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    queuename: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.openiap.RegisterQueueRequest}
 */
proto.openiap.RegisterQueueRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.openiap.RegisterQueueRequest;
  return proto.openiap.RegisterQueueRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.openiap.RegisterQueueRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.openiap.RegisterQueueRequest}
 */
proto.openiap.RegisterQueueRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setQueuename(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.openiap.RegisterQueueRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.openiap.RegisterQueueRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.openiap.RegisterQueueRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.openiap.RegisterQueueRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getQueuename();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string queuename = 1;
 * @return {string}
 */
proto.openiap.RegisterQueueRequest.prototype.getQueuename = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.openiap.RegisterQueueRequest} returns this
 */
proto.openiap.RegisterQueueRequest.prototype.setQueuename = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.openiap.RegisterQueueResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.openiap.RegisterQueueResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.openiap.RegisterQueueResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.openiap.RegisterQueueResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    queuename: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.openiap.RegisterQueueResponse}
 */
proto.openiap.RegisterQueueResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.openiap.RegisterQueueResponse;
  return proto.openiap.RegisterQueueResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.openiap.RegisterQueueResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.openiap.RegisterQueueResponse}
 */
proto.openiap.RegisterQueueResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setQueuename(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.openiap.RegisterQueueResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.openiap.RegisterQueueResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.openiap.RegisterQueueResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.openiap.RegisterQueueResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getQueuename();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string queuename = 1;
 * @return {string}
 */
proto.openiap.RegisterQueueResponse.prototype.getQueuename = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.openiap.RegisterQueueResponse} returns this
 */
proto.openiap.RegisterQueueResponse.prototype.setQueuename = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.openiap.RegisterExchangeRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.openiap.RegisterExchangeRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.openiap.RegisterExchangeRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.openiap.RegisterExchangeRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    exchangename: jspb.Message.getFieldWithDefault(msg, 1, ""),
    algorithm: jspb.Message.getFieldWithDefault(msg, 2, ""),
    routingkey: jspb.Message.getFieldWithDefault(msg, 3, ""),
    addqueue: jspb.Message.getBooleanFieldWithDefault(msg, 4, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.openiap.RegisterExchangeRequest}
 */
proto.openiap.RegisterExchangeRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.openiap.RegisterExchangeRequest;
  return proto.openiap.RegisterExchangeRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.openiap.RegisterExchangeRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.openiap.RegisterExchangeRequest}
 */
proto.openiap.RegisterExchangeRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setExchangename(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setAlgorithm(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setRoutingkey(value);
      break;
    case 4:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setAddqueue(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.openiap.RegisterExchangeRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.openiap.RegisterExchangeRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.openiap.RegisterExchangeRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.openiap.RegisterExchangeRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getExchangename();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getAlgorithm();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getRoutingkey();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getAddqueue();
  if (f) {
    writer.writeBool(
      4,
      f
    );
  }
};


/**
 * optional string exchangename = 1;
 * @return {string}
 */
proto.openiap.RegisterExchangeRequest.prototype.getExchangename = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.openiap.RegisterExchangeRequest} returns this
 */
proto.openiap.RegisterExchangeRequest.prototype.setExchangename = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string algorithm = 2;
 * @return {string}
 */
proto.openiap.RegisterExchangeRequest.prototype.getAlgorithm = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.openiap.RegisterExchangeRequest} returns this
 */
proto.openiap.RegisterExchangeRequest.prototype.setAlgorithm = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string routingkey = 3;
 * @return {string}
 */
proto.openiap.RegisterExchangeRequest.prototype.getRoutingkey = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.openiap.RegisterExchangeRequest} returns this
 */
proto.openiap.RegisterExchangeRequest.prototype.setRoutingkey = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional bool addqueue = 4;
 * @return {boolean}
 */
proto.openiap.RegisterExchangeRequest.prototype.getAddqueue = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 4, false));
};


/**
 * @param {boolean} value
 * @return {!proto.openiap.RegisterExchangeRequest} returns this
 */
proto.openiap.RegisterExchangeRequest.prototype.setAddqueue = function(value) {
  return jspb.Message.setProto3BooleanField(this, 4, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.openiap.RegisterExchangeResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.openiap.RegisterExchangeResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.openiap.RegisterExchangeResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.openiap.RegisterExchangeResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    queuename: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.openiap.RegisterExchangeResponse}
 */
proto.openiap.RegisterExchangeResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.openiap.RegisterExchangeResponse;
  return proto.openiap.RegisterExchangeResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.openiap.RegisterExchangeResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.openiap.RegisterExchangeResponse}
 */
proto.openiap.RegisterExchangeResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setQueuename(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.openiap.RegisterExchangeResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.openiap.RegisterExchangeResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.openiap.RegisterExchangeResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.openiap.RegisterExchangeResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getQueuename();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string queuename = 1;
 * @return {string}
 */
proto.openiap.RegisterExchangeResponse.prototype.getQueuename = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.openiap.RegisterExchangeResponse} returns this
 */
proto.openiap.RegisterExchangeResponse.prototype.setQueuename = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.openiap.QueueMessageRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.openiap.QueueMessageRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.openiap.QueueMessageRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.openiap.QueueMessageRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    queuename: jspb.Message.getFieldWithDefault(msg, 1, ""),
    correlationid: jspb.Message.getFieldWithDefault(msg, 2, ""),
    responseto: jspb.Message.getFieldWithDefault(msg, 3, ""),
    routingkey: jspb.Message.getFieldWithDefault(msg, 4, ""),
    exchangename: jspb.Message.getFieldWithDefault(msg, 5, ""),
    data: jspb.Message.getFieldWithDefault(msg, 6, ""),
    striptoken: jspb.Message.getBooleanFieldWithDefault(msg, 7, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.openiap.QueueMessageRequest}
 */
proto.openiap.QueueMessageRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.openiap.QueueMessageRequest;
  return proto.openiap.QueueMessageRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.openiap.QueueMessageRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.openiap.QueueMessageRequest}
 */
proto.openiap.QueueMessageRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setQueuename(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setCorrelationid(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setResponseto(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setRoutingkey(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setExchangename(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setData(value);
      break;
    case 7:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setStriptoken(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.openiap.QueueMessageRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.openiap.QueueMessageRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.openiap.QueueMessageRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.openiap.QueueMessageRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getQueuename();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getCorrelationid();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getResponseto();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getRoutingkey();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getExchangename();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getData();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = message.getStriptoken();
  if (f) {
    writer.writeBool(
      7,
      f
    );
  }
};


/**
 * optional string queuename = 1;
 * @return {string}
 */
proto.openiap.QueueMessageRequest.prototype.getQueuename = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.openiap.QueueMessageRequest} returns this
 */
proto.openiap.QueueMessageRequest.prototype.setQueuename = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string correlationId = 2;
 * @return {string}
 */
proto.openiap.QueueMessageRequest.prototype.getCorrelationid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.openiap.QueueMessageRequest} returns this
 */
proto.openiap.QueueMessageRequest.prototype.setCorrelationid = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string Responseto = 3;
 * @return {string}
 */
proto.openiap.QueueMessageRequest.prototype.getResponseto = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.openiap.QueueMessageRequest} returns this
 */
proto.openiap.QueueMessageRequest.prototype.setResponseto = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string routingkey = 4;
 * @return {string}
 */
proto.openiap.QueueMessageRequest.prototype.getRoutingkey = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.openiap.QueueMessageRequest} returns this
 */
proto.openiap.QueueMessageRequest.prototype.setRoutingkey = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string exchangename = 5;
 * @return {string}
 */
proto.openiap.QueueMessageRequest.prototype.getExchangename = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.openiap.QueueMessageRequest} returns this
 */
proto.openiap.QueueMessageRequest.prototype.setExchangename = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional string data = 6;
 * @return {string}
 */
proto.openiap.QueueMessageRequest.prototype.getData = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * @param {string} value
 * @return {!proto.openiap.QueueMessageRequest} returns this
 */
proto.openiap.QueueMessageRequest.prototype.setData = function(value) {
  return jspb.Message.setProto3StringField(this, 6, value);
};


/**
 * optional bool striptoken = 7;
 * @return {boolean}
 */
proto.openiap.QueueMessageRequest.prototype.getStriptoken = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 7, false));
};


/**
 * @param {boolean} value
 * @return {!proto.openiap.QueueMessageRequest} returns this
 */
proto.openiap.QueueMessageRequest.prototype.setStriptoken = function(value) {
  return jspb.Message.setProto3BooleanField(this, 7, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.openiap.QueueMessageResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.openiap.QueueMessageResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.openiap.QueueMessageResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.openiap.QueueMessageResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    queuename: jspb.Message.getFieldWithDefault(msg, 1, ""),
    correlationid: jspb.Message.getFieldWithDefault(msg, 2, ""),
    responseto: jspb.Message.getFieldWithDefault(msg, 3, ""),
    routingkey: jspb.Message.getFieldWithDefault(msg, 4, ""),
    exchangename: jspb.Message.getFieldWithDefault(msg, 5, ""),
    data: jspb.Message.getFieldWithDefault(msg, 6, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.openiap.QueueMessageResponse}
 */
proto.openiap.QueueMessageResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.openiap.QueueMessageResponse;
  return proto.openiap.QueueMessageResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.openiap.QueueMessageResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.openiap.QueueMessageResponse}
 */
proto.openiap.QueueMessageResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setQueuename(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setCorrelationid(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setResponseto(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setRoutingkey(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setExchangename(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setData(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.openiap.QueueMessageResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.openiap.QueueMessageResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.openiap.QueueMessageResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.openiap.QueueMessageResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getQueuename();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getCorrelationid();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getResponseto();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getRoutingkey();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getExchangename();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getData();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
};


/**
 * optional string queuename = 1;
 * @return {string}
 */
proto.openiap.QueueMessageResponse.prototype.getQueuename = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.openiap.QueueMessageResponse} returns this
 */
proto.openiap.QueueMessageResponse.prototype.setQueuename = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string correlationId = 2;
 * @return {string}
 */
proto.openiap.QueueMessageResponse.prototype.getCorrelationid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.openiap.QueueMessageResponse} returns this
 */
proto.openiap.QueueMessageResponse.prototype.setCorrelationid = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string Responseto = 3;
 * @return {string}
 */
proto.openiap.QueueMessageResponse.prototype.getResponseto = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.openiap.QueueMessageResponse} returns this
 */
proto.openiap.QueueMessageResponse.prototype.setResponseto = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string routingkey = 4;
 * @return {string}
 */
proto.openiap.QueueMessageResponse.prototype.getRoutingkey = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.openiap.QueueMessageResponse} returns this
 */
proto.openiap.QueueMessageResponse.prototype.setRoutingkey = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string exchangename = 5;
 * @return {string}
 */
proto.openiap.QueueMessageResponse.prototype.getExchangename = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.openiap.QueueMessageResponse} returns this
 */
proto.openiap.QueueMessageResponse.prototype.setExchangename = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional string data = 6;
 * @return {string}
 */
proto.openiap.QueueMessageResponse.prototype.getData = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * @param {string} value
 * @return {!proto.openiap.QueueMessageResponse} returns this
 */
proto.openiap.QueueMessageResponse.prototype.setData = function(value) {
  return jspb.Message.setProto3StringField(this, 6, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.openiap.QueueEvent.prototype.toObject = function(opt_includeInstance) {
  return proto.openiap.QueueEvent.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.openiap.QueueEvent} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.openiap.QueueEvent.toObject = function(includeInstance, msg) {
  var f, obj = {
    queuename: jspb.Message.getFieldWithDefault(msg, 1, ""),
    correlationid: jspb.Message.getFieldWithDefault(msg, 2, ""),
    responseto: jspb.Message.getFieldWithDefault(msg, 3, ""),
    routingkey: jspb.Message.getFieldWithDefault(msg, 4, ""),
    exchangename: jspb.Message.getFieldWithDefault(msg, 5, ""),
    data: jspb.Message.getFieldWithDefault(msg, 6, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.openiap.QueueEvent}
 */
proto.openiap.QueueEvent.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.openiap.QueueEvent;
  return proto.openiap.QueueEvent.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.openiap.QueueEvent} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.openiap.QueueEvent}
 */
proto.openiap.QueueEvent.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setQueuename(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setCorrelationid(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setResponseto(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setRoutingkey(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setExchangename(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setData(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.openiap.QueueEvent.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.openiap.QueueEvent.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.openiap.QueueEvent} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.openiap.QueueEvent.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getQueuename();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getCorrelationid();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getResponseto();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getRoutingkey();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getExchangename();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getData();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
};


/**
 * optional string queuename = 1;
 * @return {string}
 */
proto.openiap.QueueEvent.prototype.getQueuename = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.openiap.QueueEvent} returns this
 */
proto.openiap.QueueEvent.prototype.setQueuename = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string correlationId = 2;
 * @return {string}
 */
proto.openiap.QueueEvent.prototype.getCorrelationid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.openiap.QueueEvent} returns this
 */
proto.openiap.QueueEvent.prototype.setCorrelationid = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string Responseto = 3;
 * @return {string}
 */
proto.openiap.QueueEvent.prototype.getResponseto = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.openiap.QueueEvent} returns this
 */
proto.openiap.QueueEvent.prototype.setResponseto = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string routingkey = 4;
 * @return {string}
 */
proto.openiap.QueueEvent.prototype.getRoutingkey = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.openiap.QueueEvent} returns this
 */
proto.openiap.QueueEvent.prototype.setRoutingkey = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string exchangename = 5;
 * @return {string}
 */
proto.openiap.QueueEvent.prototype.getExchangename = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.openiap.QueueEvent} returns this
 */
proto.openiap.QueueEvent.prototype.setExchangename = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional string data = 6;
 * @return {string}
 */
proto.openiap.QueueEvent.prototype.getData = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * @param {string} value
 * @return {!proto.openiap.QueueEvent} returns this
 */
proto.openiap.QueueEvent.prototype.setData = function(value) {
  return jspb.Message.setProto3StringField(this, 6, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.openiap.UnRegisterQueueRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.openiap.UnRegisterQueueRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.openiap.UnRegisterQueueRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.openiap.UnRegisterQueueRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    queuename: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.openiap.UnRegisterQueueRequest}
 */
proto.openiap.UnRegisterQueueRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.openiap.UnRegisterQueueRequest;
  return proto.openiap.UnRegisterQueueRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.openiap.UnRegisterQueueRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.openiap.UnRegisterQueueRequest}
 */
proto.openiap.UnRegisterQueueRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setQueuename(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.openiap.UnRegisterQueueRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.openiap.UnRegisterQueueRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.openiap.UnRegisterQueueRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.openiap.UnRegisterQueueRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getQueuename();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string queuename = 1;
 * @return {string}
 */
proto.openiap.UnRegisterQueueRequest.prototype.getQueuename = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.openiap.UnRegisterQueueRequest} returns this
 */
proto.openiap.UnRegisterQueueRequest.prototype.setQueuename = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.openiap.UnRegisterQueueResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.openiap.UnRegisterQueueResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.openiap.UnRegisterQueueResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.openiap.UnRegisterQueueResponse.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.openiap.UnRegisterQueueResponse}
 */
proto.openiap.UnRegisterQueueResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.openiap.UnRegisterQueueResponse;
  return proto.openiap.UnRegisterQueueResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.openiap.UnRegisterQueueResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.openiap.UnRegisterQueueResponse}
 */
proto.openiap.UnRegisterQueueResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.openiap.UnRegisterQueueResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.openiap.UnRegisterQueueResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.openiap.UnRegisterQueueResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.openiap.UnRegisterQueueResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};


goog.object.extend(exports, proto.openiap);
